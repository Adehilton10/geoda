name: Windows builds

jobs:

  windows_build:
    runs-on: windows-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"

  strategy:
    matrix:
      include:
        - VS_VERSION: Visual Studio 16
          VS_VER: 2019
          SDK: release-1911 # gisinternals SDK version still to 2017
          MSVC_VER: 1920
          platform: x86
          LIBWEBP_URL: "https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.0.3-windows-x86.zip"
          LIBZSTD_URL: "https://github.com/facebook/zstd/releases/download/v1.4.5/zstd-v1.4.5-win32.zip"
          LIBDEFLATE_URL: "https://github.com/ebiggers/libdeflate/releases/download/v1.6/libdeflate-1.6-windows-i686-bin.zip"

  env:
    VS_VERSION: ${{ matrix.VS_VERSION }}
    VS_VER: ${{ matrix.VS_VER }}
    SDK: ${{ matrix.SDK }}
    MSVC_VER: ${{ matrix.MSVC_VER }}
    platform: ${{ matrix.platform }}
    LIBWEBP_URL: "${{ matrix.LIBWEBP_URL }}"
    LIBZSTD_URL: "${{ matrix.LIBZSTD_URL }}"
    LIBDEFLATE_URL: "${{ matrix.LIBDEFLATE_URL }}"
    APPVEYOR: true # to skip some tests
    PYTHON_VERSION: "3.7.9"
    ACTIONS_ALLOW_UNSECURE_COMMANDS: true # see https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/

  steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Set environment
      shell: pwsh
      run: |
          if($env:platform -eq "x86")
          {
              $env:ARCHITECTURE="x86"
              $env:WIN64_ARG=""
              $env:CMAKE_ARCHITECTURE="Win32"
          }
          else
          {
              $env:ARCHITECTURE="amd64"
              $env:WIN64_ARG="WIN64=YES"
              $env:CMAKE_ARCHITECTURE="x64"
          }
          echo "::set-env name=PATH::$env:PATH"
          echo "::set-env name=ARCHITECTURE::$env:ARCHITECTURE"
          echo "::set-env name=WIN64_ARG::$env:WIN64_ARG"
          echo "::set-env name=CMAKE_ARCHITECTURE::$env:CMAKE_ARCHITECTURE"

    - name: Set compiler environment
      shell: cmd
      run: |
          if "%VS_VER%" == "2019" CALL "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=%ARCHITECTURE%
          echo ::set-env name=PATH::%PATH%
          echo ::set-env name=INCLUDE::%INCLUDE%
          echo ::set-env name=LIB::%LIB%
          echo ::set-env name=LIBPATH::%LIBPATH%
    
    - name: Detect AVX2
      shell: bash
      run: |
          set -e
          cl .github/workflows/detect-avx2.c
          if ./detect-avx2.exe; then
                  echo "AVX2 available on CPU"
                  echo "ARCH_FLAGS=/arch:AVX2" >> $GITHUB_ENV
          else
                  echo "AVX2 not available on CPU."
                  echo "ARCH_FLAGS=" >> $GITHUB_ENV
          fi

    - name: Build
      shell: pwsh
      run: |
          $ErrorActionPreference = 'continue'
          function exec
          {
            param ( [ScriptBlock] $ScriptBlock )
            & $ScriptBlock 2>&1 | ForEach-Object -Process { "$_" }
            if ($LastExitCode -ne 0) { exit $LastExitCode }
          }
          echo "ARCH_FLAGS = $env:ARCH_FLAGS"
          Import-PackageProvider NuGet -Force
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          # install pscx powershell and vSSetup
          Install-Module Pscx -AllowClobber
          Install-Module VSSetup -Scope CurrentUser
          if($env:VS_VER -eq "2019")
          {
          }
          else
          {
              Import-VisualStudioVars -VisualStudioVersion $env:VS_VER -Architecture $env:ARCHITECTURE
          }
          #
          # prepare
          #
          $env:GDA_PATH="$env:GITHUB_WORKSPACE\BuildTools\windows"
          cd $env:GDA_PATH
          mkdir temp
          #
          # GDAL
          #
          $env:SDK_ZIP="$env:SDK"+"-dev.zip"
          $env:SDK_URL="http://download.gisinternals.com/sdk/downloads/$env:SDK_ZIP"
          cd temp 
          if(-Not (Test-Path -Path $env:SDK_ZIP )) { Invoke-WebRequest "$env:SDK_URL" -OutFile "$env:SDK_ZIP" }
          cd ..
          exec { 7z x .\temp\$env:SDK_ZIP }
          Rename-Item $env:SDK_ZIP libraries
          #
          # CLAPACK
          #
          cd downloads
          if(-Not (Test-Path -Path $env:SDK_ZIP )) { Invoke-WebRequest "https://github.com/GeoDaCenter/software/releases/download/v2000/CLAPACK-3.1.1-VisualStudio.zip" -OutFile "CLAPACK-3.1.1-VisualStudio.zip" } 
          7z x CLAPACK-3.1.1-VisualStudio.zip
          cd CLAPACK-3.1.1-VisualStudio
          xcopy /E /Y 
          if($env:platform -eq "x86")
          {
            msbuild libiconv.sln /property:Configuration="Release" /p:Platform="Win32"
          }
          else 
          {
            msbuild libiconv.sln /property:Configuration="Release" /p:Platform="x64"
          }

