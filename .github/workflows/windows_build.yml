# This is a basic workflow to help you get started with Actions

name: Windows builds

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  windows_build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"

    strategy:
      matrix:
        include:
          - VS_VERSION: Visual Studio 16
            VS_VER: 2019
            SDK: release-1911 # gisinternals SDK version still to 2017
            MSVC_VER: 1920
            platform: x86
            
    env:
      VS_VERSION: ${{ matrix.VS_VERSION }}
      VS_VER: ${{ matrix.VS_VER }}
      SDK: ${{ matrix.SDK }}
      MSVC_VER: ${{ matrix.MSVC_VER }}
      platform: ${{ matrix.platform }}
      APPVEYOR: true # to skip some tests
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true # see https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        
      - name: Set environment
        shell: pwsh
        run: |
          if($env:platform -eq "x86")
          {
              $env:ARCHITECTURE="x86"
              $env:WIN64_ARG=""
              $env:CMAKE_ARCHITECTURE="Win32"
          }
          else
          {
              $env:ARCHITECTURE="amd64"
              $env:WIN64_ARG="WIN64=YES"
              $env:CMAKE_ARCHITECTURE="x64"
          }
          echo "::set-env name=PATH::$env:PATH"
          echo "::set-env name=ARCHITECTURE::$env:ARCHITECTURE"
          echo "::set-env name=WIN64_ARG::$env:WIN64_ARG"
          
      - name: Set compiler environment
        shell: cmd
        run: |
          if "%VS_VER%" == "2019" CALL "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=%ARCHITECTURE%
          echo ::set-env name=PATH::%PATH%
          echo ::set-env name=INCLUDE::%INCLUDE%
          echo ::set-env name=LIB::%LIB%
          echo ::set-env name=LIBPATH::%LIBPATH%
                  
      - name: Build
        shell: pwsh
        run: |
          $ErrorActionPreference = 'continue'
          function exec
          {
            param ( [ScriptBlock] $ScriptBlock )
            & $ScriptBlock 2>&1 | ForEach-Object -Process { "$_" }
            if ($LastExitCode -ne 0) { exit $LastExitCode }
          }
          echo "ARCH_FLAGS = $env:ARCH_FLAGS"
          Import-PackageProvider NuGet -Force
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          # install pscx powershell and vSSetup
          Install-Module Pscx -AllowClobber
          Install-Module VSSetup -Scope CurrentUser
          if($env:VS_VER -eq "2019")
          {
          }
          else
          {
              Import-VisualStudioVars -VisualStudioVersion $env:VS_VER -Architecture $env:ARCHITECTURE
          }
          #
          # prepare
          #
          $env:GDA_PATH="$env:GITHUB_WORKSPACE\BuildTools\windows"
          cd $env:GDA_PATH
          mkdir temp
          #
          # GDAL
          #
          $env:SDK_ZIP="$env:SDK"+"-dev.zip"
          $env:SDK_URL="http://download.gisinternals.com/sdk/downloads/$env:SDK_ZIP"
          cd temp 
          if(-Not (Test-Path -Path $env:SDK_ZIP )) { Invoke-WebRequest "$env:SDK_URL" -OutFile "$env:SDK_ZIP" }
          cd ..
          exec { 7z x .\temp\$env:SDK_ZIP }
          Rename-Item $env:SDK libraries
          cd temp
          #
          # wxWidgets 3.1.4
          #
          if(-Not (Test-Path -Path wxWidgets.zip)) { Invoke-WebRequest "https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.4/wxWidgets-3.1.4.zip" -OutFile "wxWidgets.zip" }
          7z x wxWidgets.zip -owxWidgets
          cd wxWidgets\build\msw
          if($env:platform -eq "x86") 
          {
            nmake -f makefile.vc UNICODE=1 SHARED=1 RUNTIME_LIBS=dynamic BUILD=release MONOLITHIC=1 USE_OPENGL=1 USE_POSTSCRIPT=1
          }
          else 
          {
            nmake -f makefile.vc UNICODE=1 SHARED=1 RUNTIME_LIBS=dynamic BUILD=release MONOLITHIC=1 USE_OPENGL=1 USE_POSTSCRIPT=1 TARGET_CPU=AMD64
          }
          cd $env:GDA_PATH\temp
          #
          # Boost 1.75
          #
          Invoke-WebRequest "https://github.com/lixun910/pygeoda_boost/archive/refs/tags/v0.0.8.zip" -OutFile "boost.zip"
          7z x boost.zip
          Rename-Item pygeoda_boost-0.0.8 boost
          #
          # JsonSpirit
          #
          if(-Not (Test-Path -Path json_spirit_v4.08.zip )) { Invoke-WebRequest "https://github.com/GeoDaCenter/software/releases/download/v2000/json_spirit_v4.08.zip" -OutFile "json_spirit_v4.08.zip" }
          if(-Not (Test-Path -Path json_spirit_v4.08)) { 7z x json_spirit_v4.08.zip }
          cd json_spirit_v4.08
          xcopy /E /Y $env:GDA_PATH\dep\json_spirit .
          if($env:platform -eq "x86") 
          {
            msbuild.exe json_vs2019.sln /property:Configuration="Release" /p:Platform="Win32"
          }
          else 
          {
            msbuild.exe json_vs2019.sln /property:Configuration="Release" /p:Platform="x64"
          }
          cd ..
          #
          # CLAPACK
          #
          Invoke-WebRequest "https://github.com/GeoDaCenter/software/releases/download/v2000/CLAPACK-3.1.1-VisualStudio.zip" -OutFile "CLAPACK-3.1.1-VisualStudio.zip" 
          7z x CLAPACK-3.1.1-VisualStudio.zip
          cd CLAPACK-3.1.1-VisualStudio
          xcopy /E /Y $env:GDA_PATH\dep\CLAPACK-3.1.1-VisualStudio .
          if($env:platform -eq "x86")
          {
            msbuild.exe clapack_vs2019.sln /t:libf2c_vs2019 /property:Configuration="ReleaseDLL"  /p:Platform="Win32"
            msbuild.exe clapack_vs2019.sln /t:BLAS\blas_vs2019 /property:Configuration="ReleaseDLL" /p:Platform="Win32"
            msbuild.exe clapack_vs2019.sln /t:clapack_vs2019 /property:Configuration="ReleaseDLL" /p:Platform="Win32"
          }
          else 
          {
            msbuild.exe clapack_vs2019.sln /t:libf2c_vs2019 /property:Configuration="ReleaseDLL" /p:Platform="x64"
            msbuild.exe clapack_vs2019.sln /t:BLAS\blas_vs2019 /property:Configuration="ReleaseDLL" /p:Platform="x64"
            msbuild.exe clapack_vs2019.sln /t:clapack_vs2019 /property:Configuration="ReleaseDLL" /p:Platform="x64"
          }
          cd ..
          #
          # Eigen3
          #
          Invoke-WebRequest "https://github.com/GeoDaCenter/software/releases/download/v2000/eigen3.zip" -OutFile "eigen3.zip"
          7z x eigen3.zip
          #
          # Spectra
          #
          Invoke-WebRequest "https://github.com/yixuan/spectra/archive/refs/tags/v0.8.0.zip" -OutFile "spectra.zip"
          7z x spectra.zip
          Rename-Item spectra-0.8.0 spectra
          #
          # OpenCL
          #
          Invoke-WebRequest "https://github.com/GeoDaCenter/software/releases/download/v2000/OpenCL.zip" -OutFile "OpenCL.zip"
          7z x OpenCL.zip
          dir
          cd ..
          #
          # GeoDa
          #
          if($env:platform -eq "x86")
          {
            msbuild.exe GeoDa.vs2010.sln /t:GeoDa /property:Configuration="Release" /p:Platform="Win32"
          }
          else
          {
            msbuild.exe GeoDa.vs2010.sln /t:GeoDa /property:Configuration="Release" /p:Platform="x64"  
          }
          #
          # InnoSetup
          #
          Choco-Install -PackageName innosetup
          Invoke-PesterTests -TestFile "Tools" -TestName "InnoSetup"
          #
          # Binary
          #
          if($env:platform -eq "x86")
          {
            ISCC.exe /q installer\32bit\GeoDa.iss
          } 
          else
          {
            ISCC.exe /q installer\64bit\GeoDa.iss
          } 
          dir





