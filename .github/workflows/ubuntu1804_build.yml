# This is a basic workflow to help you get started with Actions

name: Ubuntu 18.04(Bionic) builds

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  bionic_build:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"

    # Steps represent a sequence of tasks that will be executed as part of the job
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Prepare
      - name: Prepare
        run: |
          pwd
          mkdir o
          cd BuildTools
          cd ubuntu
          mkdir temp
          mkdir libraries
          cd libraries
          mkdir include
          mkdir lib

      # Install boost 1.75
      - name: Install Boost
        run: |
          cd BuildTools
          cd ubuntu
          cd temp
          curl -L -O https://dl.bintray.com/boostorg/release/1.75.0/source/boost_1_75_0.tar.bz2
          tar -xf boost_1_75_0.tar.bz2 
          mv boost_1_75_0 boost
          cd boost
          ./bootstrap.sh
          ./b2 --with-thread --with-date_time --with-chrono --with-system link=static threading=multi stage

      # Build JSON Spirit v4.08
      - name: Build JSON Spirit v4.08
        run: |
          pwd
          cd BuildTools
          cd ubuntu
          cd temp
          curl -L -O https://github.com/GeoDaCenter/software/releases/download/v2000/json_spirit_v4.08.zip
          unzip json_spirit_v4.08.zip
          cd json_spirit_v4.08
          cp ../../dep/json_spirit/CMakeLists.txt .
          mkdir bld
          cd bld
          cmake ..
          make -j2
          cp -R ../json_spirit ../../../libraries/include/.
          cp json_spirit/libjson_spirit.a ../../../libraries/lib/.

      # Build CLAPACK
      - name: Build CLAPACK 3.2.1
        run: |
          pwd
          cd BuildTools
          cd ubuntu
          export GEODA_HOME=$PWD
          cd temp
          curl -L -O https://github.com/GeoDaCenter/software/releases/download/v2000/clapack.tgz
          tar -xf clapack.tgz
          cp -rf ../dep/CLAPACK-3.2.1 .
          cd CLAPACK-3.2.1
          make -j2 f2clib
          make -j2 blaslib
          cd INSTALL
          make -j2
          cd ..
          cd SRC
          make -j2
          cd ..
          cp F2CLIBS/libf2c.a .
          cd ..

      # Build Eigen3 and Spectra
      - name: Build Eigen3 and Spectra V0.8.0
        run: |
          pwd
          cd BuildTools
          cd ubuntu
          cd temp
          curl -L -O https://github.com/GeoDaCenter/software/releases/download/v2000/eigen3.zip
          unzip eigen3.zip
          curl -L -O https://github.com/yixuan/spectra/archive/refs/tags/v0.8.0.zip
          unzip v0.8.0.zip
          mv spectra-0.8.0 spectra
          ls

      # Build wxWidgets 3.1.4
      - name: Build wxWidgets 3.1.4
        run: |
          pwd
          cd BuildTools
          cd ubuntu
          export GEODA_HOME=$PWD
          cd temp
          curl -L -O https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.4/wxWidgets-3.1.4.tar.bz2
          tar -xf wxWidgets-3.1.4.tar.bz2
          cd wxWidgets-3.1.4
          chmod +x configure
          ./configure --with-gtk=3 --disable-shared --enable-monolithic --with-opengl --enable-postscript --without-libtiff --disable-debug --enable-webview --prefix=$GEODA_HOME/libraries
          make -j2
          make install
          
      # Install libgdal-dev
      - name: Install libgdal-dev
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libgdal-dev

      # Build GeoDa
      - name: Build GeoDa
        run: |
          cp GeoDamake.bionic.opt GeoDamake.opt
          cd BuildTools
          cd ubuntu
          export GEODA_HOME=$PWD
          make -j2
          make app
      
      # Create deb
      - name: Create deb
        run: |
          cd BuildTools
          cd ubuntu
          ./create_deb_bionic.sh

      # Upload artifact
      - uses: actions/upload-artifact@v2
        with:
          name: GeoDa-1.18.2-Bionic
          path: ${{ github.workspace }}/BuildTools/ubuntu/geoda_1.18-1bionic1_amd64.deb





